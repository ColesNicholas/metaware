DF$es.var[i] <- EsVarBetwCount(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
count.1 = DF$count.1[i],
count.2 = DF$count.2[i])
}
# call EsVarBetw on cases with continuous data and a between subject designs
if (DF$es.calc[i] != "or"){
DF$es.var[i] <- EsVarBetw(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
es = DF$es[i])
}
}
}
# Chunk 10: assumed correlation
# define assumed correlation (sensitivity analyses performed later)
corr <- .5
# Chunk 11: EsWitnMean
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
# formula for imputing sd.diff:
# http://handbook.cochrane.org/chapter_16/16_4_6_1_mean_differences.htm
EsWitnMean <- function(m.1, sd.1, m.2, sd.2, corr){
sd.diff <- sqrt((sd.1^2) + (sd.2^2) -
(2 * corr * sd.1 * sd.2));
es <- ((m.1 - m.2) / sd.diff) * sqrt(2 * (1- corr));
return(es)
}
# Chunk 12: EsWitnTval
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsWitnTval <- function(n.1, tval, corr){
es <- tval * sqrt((2 * (1 - corr)) / n.1);
return(es)
}
# Chunk 13: EsWitnFval
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsWitnFval <- function(n.1, fval, corr){
es <- sqrt((2 * fval * (1- corr)) / n.1);
return(es)
}
# Chunk 14: EsVarWitn
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsVarWitn <- function(n.1, es){
es.var <- ((1 / n.1) +
((es^2) / (2 * n.1))) *
2 * (1 - corr);
return(es.var)
}
# Chunk 15: w: call functions to calculate d
for (i in 1:nrow(DF)) {
if (DF$design[i] == "within"){
# call EsWitnMean on cases with within-subject designs and *means*
if(DF$es.calc[i] == "m_sd") {
DF$es[i] <- EsWitnMean(m.1 = DF$m.1[i],
sd.1 = DF$sd.1[i],
m.2 = DF$m.2[i],
sd.2 = DF$sd.2[i],
corr = corr)
}
# call EsWitnTval on cases with within-subject designs and *t-values*
if (DF$es.calc[i] == "t") {
DF$es[i] <- EsWitnTval(n.1 = DF$n.1[i],
tval = DF$tval[i],
corr = corr)
}
# call EsWitnFval on cases with within-subject designs and *F-values*
if (DF$es.calc[i] == "f") {
DF$es[i] <- EsWitnFval(n.1 = DF$n.1[i],
fval = DF$fval[i],
corr = corr)
}
# call EsVarWitn on cases with within subject designs
DF$es.var[i] <- EsVarWitn(n.1 = DF$n.1[i],
es = DF$es[i])
}
}
# Chunk 16: del var
# delete unnecessary variables
rm(corr, i,
EsBetwFval, EsBetwMean, EsBetwTval,
EsBetwPval, EsVarBetw, EsVarWitn,
EsWitnFval, EsWitnMean, EsWitnTval,
EsBetwCount, EsVarBetwCount)
# Chunk 17
DF <- DF %>%
filter(id != 18)
# Chunk 18: specify es direction
DF <- DF %>%
# specify direction of the effect size
rowwise() %>%
mutate(es = if_else(condition = direction == "positive",
true = abs(es),
false = abs(es) * -1)
) %>%
ungroup()
# Chunk 19
write.csv(DF %>%
filter(!is.na(es)),
'metaware.data_clean.csv',
row.names = FALSE)
# Chunk 20
overall <-
robu(formula = es ~ 1,
data = DF,
studynum = id,
var.eff.size = es.var,
modelweights = "HIER",
small = FALSE)
# Chunk 21
# create blank dataframe
mod.r <- data.frame(mod = character(),
level = character(),
s = integer(),
k = integer(),
d = integer(),
f = integer(),
LB = integer(),
UB = integer(),
p = integer())
# create list of moderators
mod.l <- c("student", "paid", "online",
"design", "ref.type", "published")
# Chunk 22
ModAnalysis <- function(mod){
# fit model
m <- rma.uni(yi = es,
vi = es.var,
data = DF,
mods = as.formula(paste0("~ ", mod)),
method = "REML") %>%
robust(cluster = DF$id)
# append to moderator analysis results dataframe
mod.r <<-
rbind(mod.r,
cbind(mod = mod,
level = NA,
s = m$n,
k = m$k,
d = NA,
f = round(m$QM,
2),
LB = NA,
UB = NA,
p = round(m$QMp,
4))
)
}
# Chunk 23
SubAnalysis <- function(df, level, mod){
# fit subgroup model
m <- rma.uni(yi = es,
vi = es.var,
data = df,
method = "REML")
# run cluster-robust analysis if there are enough observations
if(nrow(df) > 1){
m <- robust(m, cluster = df$id)
}
# append to moderator analysis results dataframe
mod.r <<-
rbind(mod.r,
cbind(mod = mod,
level = level,
s = ifelse(nrow(df) > 1,
m$n,
1),
k = m$k,
d = round(m$b[1],
2),
f = NA,
LB = round(m$ci.lb, 2),
UB = round(m$ci.ub, 2),
p = round(m$pval,
4))
)
}
# Chunk 24
# DF <- DF %>%
#   filter(name != "Demand effects in survey experiments: An empirical assessment")
for (mod in mod.l){
ModAnalysis(mod = mod)
mapply(FUN = SubAnalysis,
df = split(DF, DF[, mod]),
level = names(split(DF, DF[, mod])),
mod = mod)
}
# Chunk 25
rma.uni(yi = es,
vi = es.var,
data = DF,
method = "REML") %>%
robust(cluster = DF$id) %>%
funnel()
# Chunk 26
# aggregate dependent effect sizes
DF.AGG <- agg(id = id,
es = es,
var = es.var,
method = "BHHR",
cor = .5,
data = DF)
# PET-PEESE models
## syntax provided by Carter & McCullough, 2014
##  first compute standard error of es
DF.AGG$se <- sqrt(DF.AGG$var)
### create models
pet <-   lm(DF.AGG$es ~ DF.AGG$se,
weights = 1 / DF.AGG$var) %>% summary()
peese <- lm(DF.AGG$es ~ DF.AGG$var,
weights = 1 / DF.AGG$var) %>% summary()
# Vevea and Hedges (1995) Weight-Function Model
weight.funct <- weightfunct(effect = DF.AGG$es,
v = DF.AGG$var,
mods = NULL,
weights= NULL,
fe = FALSE,
table = TRUE,
pval = NULL)
# Mathur and VanderWeele 2020 sensitivity analyses
corrected_meta(yi = DF$es,
vi = DF$es.var,
eta = 13,
clustervar = DF$id,
model = "robust",
favor.positive = T,
)
significance_funnel(yi = DF$es,
vi = DF$es.var,
favor.positive = T)
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvz", ]$level = "control v. nil demand"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvc", ]$level = "control v. negative demand"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvz", ]$level = "nil v. negative demand"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvc", ]$level = "positive demand v. control"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvn", ]$level = "positive v. negative demand"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvz", ]$level = "positive v. nil demand"
mod.r[mod.r$mod == "ref.type", ]$mod = "paradigm"
tmp <- mod.r %>%
group_split(mod) %>%
map_dfr(~ add_row(.x, .after = Inf)) %>%
ungroup() %>%
mutate(Moderator =
if_else(is.na(level),
mod,
paste0("  ",
level))
) %>%
relocate(Moderator, .before = mod) %>%
mutate(d = if_else(is.na(d),
99,
as.numeric(d)),
LB = if_else(is.na(LB),
99,
as.numeric(LB)),
UB = if_else(is.na(UB),
99,
as.numeric(UB)),
p = if_else(as.numeric(p) > .05,
round(as.numeric(p), 2) %>%
as.character(),
stars.pval(as.numeric(p))
)
) %>%
select(Moderator, s, k, d, LB, UB, p) %>%
add_row(Moderator = "Moderator",
s = "s",
k = "k",
d = 99,
LB = 99,
UB = 99,
p = "p-value",
.before = 1) %>%
add_row(Moderator = NA,
s = NA,
k = NA,
d = 99,
LB = 99,
UB = 99,
p = NA,
.after = 1)
tmp <- tmp[1 : (nrow(tmp) - 1), ]
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
geom_point(shape = "diamond",
size = 3) +
geom_errorbarh(height = .5) +
# add moderator label
geom_text(aes(label = Moderator),
x = -2.25,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
# add study label
geom_text(aes(label = k),
x = -1.5,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 2.1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
coord_cartesian(xlim=c(-2.25, 2.25)) +
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
theme_classic() +
scale_x_continuous(labels = c("",
seq(-1, 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "Cohen's standardized d")
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
geom_point(shape = "diamond",
size = 3) +
geom_errorbarh(height = .5) +
# add moderator label
geom_text(aes(label = Moderator),
x = -2.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
# add study label
geom_text(aes(label = k),
x = -1.5,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 2.1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
coord_cartesian(xlim=c(-2.75, 2.25)) +
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
theme_classic() +
scale_x_continuous(labels = c("",
seq(-1, 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "Cohen's standardized d")
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
geom_point(shape = "diamond",
size = 3) +
geom_errorbarh(height = .5) +
# add moderator label
geom_text(aes(label = Moderator),
x = -2.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
# add study label
geom_text(aes(label = k),
x = -1.5,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 2.1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
coord_cartesian(xlim=c(-2.75, 2.25)) +
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
theme_classic()
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
geom_point(shape = "diamond",
size = 3) +
geom_errorbarh(height = .5) +
# add moderator label
geom_text(aes(label = Moderator),
x = -2.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
# add study label
geom_text(aes(label = k),
x = -1.5,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 2.1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
coord_cartesian(xlim=c(-2.75, 2.25)) +
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
theme_classic() +
scale_x_continuous(labels = c("", "",
seq(-1, 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "Cohen's standardized d")
