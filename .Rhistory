style = 1)
tmp <-
rbind(mod.df,
cbind(level = "in-person study; student sample; no payment; positive demand",
mod = "custom",
beta = m.s1$beta[1] %>%
as.numeric %>%
round(2),
lb = m.s1$ci.lb[1] %>%
as.numeric %>%
round(2),
ub = m.s1$ci.ub[1] %>%
as.numeric %>%
round(2),
style = 3), # set style to 3 so you can italicize text later
cbind(level = "online study; non-student sample; payment; positive demand",
mod = "custom",
beta = m.s2$beta[1] %>%
as.numeric %>%
round(2),
lb = m.s2$ci.lb[1] %>%
as.numeric %>%
round(2),
ub = m.s2$ci.ub[1] %>%
as.numeric %>%
round(2),
style = 3)
)
tmp
tmp %>% View()
# Chunk 1: setup
# load packages writing and data processing packages
library("papaja")
library("tidyverse")
library("readxl")
library("cowplot")
# load meta-analyses packages
library("metafor")
library("weightr")
library("PublicationBias")
# load mixed-effect regression packages
library(lme4)
library(lmerTest)
library(emmeans)
# identify refs
r_refs("r-references.bib")
# turn scientific notation off
options(scipen = 999)
# set theme
theme_set(theme_classic())
# Chunk 2: framework
knitr::include_graphics("images/metaware_framework.png")
# Chunk 3: literature search
# open and process literature search data
DF.s <-
# open data
read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening") %>%
# identify unpublished dissertations by identifying links that contain the word 'dissertation'
mutate(dissertation =
if_else(condition = grepl("dissertation", link),
true = 1,
false = 0)
)
# calculate number of records from PsycInfo by removing all records with no known database (i.e., ones that were personally found)
r.pi <- DF.s %>%
filter(!is.na(Database)) %>%
nrow()
# calculate number of unpublished records (i.e., dissertations)
r.unp <- DF.s %>%
filter(dissertation == 1) %>%
nrow()
# Chunk 4: final.df
# open clean effect size data
DF.es <-
read_csv(file = "data/metaware_data_clean.csv")
# identify total number of studies (denoted by id.study column)
num.s <- DF.es$id.study %>%
unique() %>%
length()
# identify total number of papers (denoted by name column)
num.p <- DF.es$name %>%
unique() %>%
length()
# for the known outlier (id = 18), give an example of the largest effect size
outlier.es <- DF.es %>%
filter(id.study == 18) %>%
summarise(max.es = min(es)) %>% #  using min because largest value is neg
round(2)
# Chunk 5: clean.env.1
# remove outlier and re-initialize id factors
DF.es <- DF.es %>%
filter(id.study != 18) %>%
mutate(id.study = factor(id.study),
id.es = factor(id.es))
# clean environment
rm(DF.s, r.pi, r.unp, num.s, num.p, outlier.es)
# Chunk 6: corr.sens
# examine how assumed repeated measures correlation impacts general pattern of results
# get list of sensitivity dataframes
sens.df.list <- list.files(path = "./data/r_sensitivity")
# (1) open dataframe, (2) compute intercept-only model, (3) extract overall es
sens.res <-
sapply(X = sens.df.list,
FUN = function(i){
# open data
df <- read.csv(paste0("data/r_sensitivity/",
i)
)
# fit model
m <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# return overall es as a number
m$b %>%
as.numeric() %>%
return()
}
)
# compute range of es values
sens.range <- max(sens.res) - min(sens.res)
# delete vestigial
rm(sens.df.list, sens.res)
# Chunk 7: mult.eff
# calculate percentage of studies with multiple effect sizes
mult.eff.per <- DF.es %>%
# identify number of effect sizes for each study (id)
group_by(id.study) %>%
count() %>%
# code whether each study has more than one effect size
mutate(dep = if_else(condition = n > 1,
true = 1,
false = 0)
) %>%
# calculate proportion of studies with more than one effect size
ungroup() %>%
summarise(mult.eff = mean(dep)) %>%
# export as percentage
as.numeric() %>%
round(digits = 2) * 100
# Chunk 8: clean.env.2
# delete vestigial
rm(mult.eff.per, vig.n, survey.n, sens.range)
# Chunk 9: overall
# estimate overall effect size
overall <-
rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# estimate standard deviation of effect size distribution (i.e., Tau)
# to do so, combine both sources of estimated variability in the model
tau <- sqrt(overall$sigma2[1] + overall$sigma2[2])
# estimate proportion of hypothesis-consistent and inconsistent responding
# -0.10 < d > 0.10 is the arbitrary threshold for saying it's neither consistent or inconsistent
h.c <- pnorm(q = .10,
mean = overall$b,
sd = tau,
lower.tail = F) %>%
round(2) * 100
h.i <- pnorm(q = (-.10),
mean = overall$b,
sd = tau,
lower.tail = T) %>%
round(2) * 100
# estimate lower and upper bound of effect size distribution
dist.min <- rnorm(n = 1000000,
mean = overall$b,
sd = tau) %>%
min() %>%
round(digits = 2)
dist.max <- rnorm(n = 1000000,
mean = overall$b,
sd = tau) %>%
max() %>%
round(digits = 2)
# Chunk 11: forest
# create a temporary dataset containing effect sizes and 95% CI's
tmp <- DF.es %>%
rowwise() %>%
mutate(se = sqrt(es.var),
ub = es + (se * 1.96),
ub = round(ub, 2),
lb = es - (se * 1.96),
lb = round(lb, 2),
es = round(es, 2)) %>%
ungroup() %>%
arrange(es, id.study)
# create a forest plot w/ distribution overlay
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)) * 0.007692308,
x = es,
xmin = lb,
xmax = ub)) +
#hypothesis inconsistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, -.10)) +
# negligible effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "grey80",
alpha = .25,
xlim = c(-.10, .10)) +
# hypothesis consistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#00998a",
alpha = .25,
xlim = c(.10, 2)) +
# create dotted line at d = 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dotted",
alpha = .5,
size =.5)  +
# add points and error bars
geom_point(shape = "diamond",
size = 1,
alpha = .8,
color = "dark grey") +
geom_errorbarh(height = .005,
size = .1,
alpha = .8,
color = "dark grey") +
# add citation label
geom_text(aes(label = citation),
x = -2.7,
hjust = 0,
size = 1) +
# add CI label
geom_text(aes(label = paste0(es,
" [", lb, ", ", ub, "]")),
x = 3.9,
size = 1,
hjust = 1) +
labs(x = "Cohen's d",
y = "density") +
# increase plotting area
scale_x_continuous(limits = c(-2.7, 4),
breaks = seq(from = -2, to = 3, by = 1),
expand = c(.01, .01)) +
scale_y_continuous(expand = c(.005, 0))
# Chunk 12: mod
# create moderator analysis function
ModAnalysis = function(m, df = DF.es) {
# set dataset
df <- df
# moderator analysis
mod.m <- rma.mv(yi = es,
V = es.var,
data = df,
random = ~ 1 | id.study / id.es,
mods = as.formula(paste0("~ ", m)),
test= "t")
sub.m <- rma.mv(yi = es,
V = es.var,
data = df,
random = ~ 1 | id.study / id.es,
mods = as.formula(paste0("~ 0 + ", m)),
test= "t")
# return results as list
return(list(mod = mod.m,
sub = sub.m))
}
# conduct moderator and subgroup analyses for moderators assessed with full dataset
mod.l <- c("student", "paid", "online",
"design", "ref.r", "published",
"year")
mod.r <-
sapply(X = mod.l,
simplify = F,
FUN = ModAnalysis)
rm(mod.l)
# test ref.type moderator in scenarios where there is a control comparison (i.e., ref.r == single)
mod.r[["ref.type"]] <-
ModAnalysis(m = "ref.type",
df = DF.es[DF.es$ref.r == "single", ])
# add motivation, opportunity, belief, and prediction moderators
## Note: comparisons with nil-demand conditions are excluded
mod.r.2 <-
sapply(X = c("mot", "opp", "bel", "pre"),
simplify = F,
FUN = ModAnalysis,
df = DF.es %>%
filter(ref.type != "cvz" &
ref.type != "pvz"))
## combine results
mod.r = c(mod.r, mod.r.2)
# delete vestigial
rm(mod.r.2)
########################
# 1. Use models to derive estimated effects in two common research scenarios
########################
# set R back to default contrasts
options(contrasts = c("contr.treatment", "contr.poly"))
# change reference levels for:
## In-person study, no payment, students, positive demand
DF.es$student <- factor(DF.es$student,
levels = c("yes", "mix", "no"))
## fit model
m.s1 <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es,
mods = ~ student + paid + online + ref.type,
test = "t")
# change reference levels for:
## Online study, payment, non-students, positive demand
DF.es$online <- factor(DF.es$online,
levels = c("yes", "no"))
DF.es$paid <- factor(DF.es$paid,
levels = c("yes", "no"))
DF.es$student <- factor(DF.es$student,
levels = c("no", "mix", "yes"))
## fit model
m.s2 <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es,
mods = ~ student + paid + online + ref.type,
test = "t")
########################
# 2. Create dataframe containing moderator analysis output
########################
## list of moderators
mod.list <- c("student", "paid", "online",
"ref.type", "design")
## function for extraction
ModFunnelFun <- function(x){
cbind(mod = x,
beta = mod.r[[x]]$sub$beta %>%
as.numeric() %>%
round(2),
lb = mod.r[[x]]$sub$ci.lb %>%
round(2),
ub = mod.r[[x]]$sub$ci.ub %>%
round(2))
}
## lapply
mod.df <- sapply(X = mod.list,
FUN = ModFunnelFun)
rm(ModFunnelFun, mod.list)
########################
# 3. Prepare dataframe for plotting
########################
# rbind lapply output and convert to dataframe
mod.df <- do.call(rbind, mod.df) %>%
as.data.frame() %>%
# pull rownnames to variable called level
rownames_to_column(var = "level")
# custom sort levels
mod.df$level = c("03_mixed sample",
"02_non-student sample",
"01_student sample",
"04_volunteer participants",
"05_paid participants",
"06_in-person study",
"07_online study",
"10_positive demand",
"11_nil demand",
"12_negative demand",
"08_between-subject design",
"09_within-subject design")
mod.df <- mod.df %>%
# custom sort
arrange(level) %>%
# removed appended numbers that helped with sort
mutate(level = substr(level, 4, 99),
style = 1)
# manually add output from the models that estimated effects in two common research scenarios
mod.df <-
rbind(mod.df,
cbind(level = "in-person study; student sample; no payment; positive demand",
mod = "custom",
beta = m.s1$beta[1] %>%
as.numeric %>%
round(2),
lb = m.s1$ci.lb[1] %>%
as.numeric %>%
round(2),
ub = m.s1$ci.ub[1] %>%
as.numeric %>%
round(2),
style = 3), # set style to 3 so you can italicize text later
cbind(level = "online study; non-student sample; payment; positive demand",
mod = "custom",
beta = m.s2$beta[1] %>%
as.numeric %>%
round(2),
lb = m.s2$ci.lb[1] %>%
as.numeric %>%
round(2),
ub = m.s2$ci.ub[1] %>%
as.numeric %>%
round(2),
style = 3)
)
ggplot(data = mod.df,
aes(y = rev(1:nrow(tmp)) * 0.08571429, # scale so density plot can be added
x = as.numeric(beta),
xmin = as.numeric(lb),
xmax = as.numeric(ub)
)
)
ggplot(data = mod.df,
aes(y = rev(1:nrow(mod.df)) * 0.08571429, # scale so density plot can be added
x = as.numeric(beta),
xmin = as.numeric(lb),
xmax = as.numeric(ub)
)
)
ggplot(data = mod.df,
aes(y = rev(1:nrow(mod.df)) * 0.08571429, # scale so density plot can be added
x = as.numeric(beta),
xmin = as.numeric(lb),
xmax = as.numeric(ub)
)
) +
# hypothesis inconsistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, -.10))
ggplot(data = mod.df,
aes(y = rev(1:nrow(mod.df)) * 0.08571429, # scale so density plot can be added
x = as.numeric(beta),
xmin = as.numeric(lb),
xmax = as.numeric(ub)
)
) +
# hypothesis inconsistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, -.10)) +
# negligible effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "grey80",
alpha = .25,
xlim = c(-.10, .10)) +
# hypothesis consistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#00998a",
alpha = .25,
xlim = c(.10, 2)) +
# create dotted line at d = 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dotted",
alpha = .5,
size = .5)  +
# add points and error bars
geom_point(shape = "diamond",
size = 2,
alpha = .8,
color = "dark grey") +
geom_errorbarh(height = .005,
size = .2,
alpha = .8,
color = "dark grey") +
# add label
geom_text(aes(label = level,
fontface = as.numeric(style)),
x = -2.7,
hjust = 0,
size = 2) +
# limit view of plot
coord_cartesian(xlim=c(-2.8, 3)) +
# add CI label
geom_text(aes(label = paste0(beta, " [",
lb, ", ",
ub, "]"),
fontface = as.numeric(style)),
x = 2.5,
size = 2,
hjust = 1) +
labs(x = "Cohen's d",
y = "density") +
# increase plotting area
scale_x_continuous(limits = c(-2.8, 3),
breaks = seq(from = -2, to = 3, by = 1),
expand = c(.01, .01)) +
scale_y_continuous(expand = c(.005, 0))
