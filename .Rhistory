########################
ggplot(data = mod.df,
aes(y = rev(1:nrow(mod.df)) * 0.08571429, # scale so density plot can be added
x = as.numeric(beta),
xmin = as.numeric(lb),
xmax = as.numeric(ub)
)
) +
# hypothesis inconsistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, -.10)) +
# negligible effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "grey80",
alpha = .25,
xlim = c(-.10, .10)) +
# hypothesis consistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#00998a",
alpha = .25,
xlim = c(.10, 2)) +
# create dotted line at d = 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dotted",
alpha = .5,
size = .5)  +
# add points and error bars
geom_point(shape = "diamond",
size = 2,
alpha = .8,
color = "dark grey") +
geom_errorbarh(height = .005,
size = .2,
alpha = .8,
color = "dark grey") +
# add label
geom_text(aes(label = level,
fontface = as.numeric(style)),
x = -2.7,
hjust = 0,
size = 2) +
# limit view of plot
coord_cartesian(xlim=c(-2.8, 3)) +
# add CI label
geom_text(aes(label = paste0(beta, " [",
lb, ", ",
ub, "]"),
fontface = as.numeric(style)),
x = 2.5,
size = 2,
hjust = 1) +
labs(x = "Cohen's d",
y = "density") +
# increase plotting area
scale_x_continuous(limits = c(-2.8, 3),
breaks = seq(from = -2, to = 3, by = 1),
expand = c(.01, .01)) +
scale_y_continuous(expand = c(.005, 0))
rm(mod.df)
# Chunk 14: anticonfound
# calculate percentage of online effect sizes that had students vs. non-students
in.s <- DF.es[DF.es$online == "no", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
on.s <- DF.es[DF.es$online == "yes", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
# calculate percentage of paid effect sizes with students vs. non-students
v.s <- DF.es[DF.es$paid == "no", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
p.s <- DF.es[DF.es$paid == "yes", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
# unconfounded analysis
## set Type 3 SS
options(contrasts = c('contr.sum',
'contr.poly'))
m.sens <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es,
mods = ~ student + paid + online,
test= "t")
m.sens.student <- anova(m.sens, btt = c(2, 3))
m.sens.online <- anova(m.sens, btt = c(5))
m.sens.pay <- anova(m.sens, btt = c(4))
# Chunk 15: pub.bias
# delete vestigial
rm(in.s, on.s, v.s, p.s,
m.s1, m.s2,
m.sens, m.sens.student, m.sens.online, m.sens.pay)
# Define publication bias analysis that
# 1. Mathur and VanderWeele 2020 sensitivity analyses
# 2. Fits three-level precision-effect test
# 3a. Aggregates dependent effect sizes (with given rho value)
# 3b. Aggregated precision-effect test
# 3b. Fits Vevea and Hedges (1995) Weight-Function Model w/ aggregated effects
# 4a. Fit funnel plot
# 4b. Fit funnel plot w/ aggregated dependencies
# 5. Organizes results into list
##########################
PubBias = function(rho.val = .5){
# 1. sensitivity analyses
########################
sens <- corrected_meta(yi = DF.es$es,
vi = DF.es$es.var,
eta = 49,
clustervar = DF.es$id.study,
model = "robust",
favor.positive = T)
# 2. three-level precision-effect test
########################
pe.3l <- rma.mv(yi = es,
V = es.var,
mods = ~ sqrt(es.var),
data = DF.es,
random = ~ 1 | id.study / id.es)
# 3a. aggregate dependent effect sizes
########################
DF.agg <- DF.es %>%
# convert to an 'escalc' object so function can run
escalc(yi = es,
vi = es.var,
data = DF.es,
measure = "SMD") %>%
# delete vestigial: es is now yi; es.var is now vi
select(-c(es, es.var)) %>%
# aggregate dependencies
aggregate(x = .,
cluster = id.study,
rho = rho.val)
# 3b. aggregated precision-effect test
########################
pe.a <- rma.uni(yi = yi,
vi = vi,
mods = ~ sqrt(vi),
data = DF.agg,
method = "REML")
# 3c. Weight-function model
########################
weight.funct <- weightfunct(effect = DF.agg$yi,
v = DF.agg$vi,
mods = NULL,
weights= NULL,
fe = FALSE,
table = TRUE,
pval = NULL)
# 4a. funnel plot
########################
par(mfrow=c(1,2))
rma.uni(yi = es,
vi = es.var,
data = DF.es,
method = "REML") %>%
metafor::funnel(hlines = "lightgray",
xlab = "Cohen's standardized d")
# 4b. funnel plot w/ aggregated dependencies
########################
rma.uni(yi = yi,
vi = vi,
data = DF.agg,
method = "REML") %>%
metafor::funnel(hlines = "lightgray",
xlab = "Cohen's standardized d (aggregated)")
# save funnel plot as object
funnel.plot <- recordPlot()
# clear R environment
plot.new()
# 5. Organize results in list
########################
list(sens = sens,
pe.3l = pe.3l,
DF.agg = DF.agg,
pe.a = pe.a,
weight.funct = weight.funct,
funnel = funnel.plot) %>%
return()
}
# for range of rho values, run publication bias analyses
rho.l = seq(from = .1,
to = .9,
by = .2)
pub.r <- lapply(X = rho.l,
FUN = PubBias)
names(pub.r) = paste0("rho_", rho.l) #  name list
# delete vestigial
rm(rho.l, PubBias)
# look at sensitivity analyses
## general story: often, but not always, find evidence of reverse publication bias (preference for negative effects)
# lapply(pub.r, function(x){x[["pe.a"]]})
# lapply(pub.r, function(x){x[["peese"]]})
# lapply(pub.r, function(x){x[["weight.funct"]]})
# lapply(pub.r, function(x){x[["funnel"]]})
# plot funnels
# overall %>%
#   metafor::funnel(x = .,
#                   hlines = "lightgray",
#                   xlab = "Cohen's standardized d")
#
# pub.r$rho_0.5$pe.3l$b[2]
#
# pub.r$rho_0.5$weight.funct %>% View()
# Chunk 16: funnel
##########
# Funnel plot with non-aggregated dependencies
##########
# create a temporary dataset with standard error (se) values
tmp <- DF.es %>%
rowwise() %>%
mutate(se = sqrt(es.var)) %>%
ungroup()
# create temporary sequence of ses
se.seq = seq(0, max(tmp$se),
length.out = nrow(DF.es))
ll95 = overall$b[1] - (1.96 * se.seq)
ul95 = overall$b[1] + (1.96 * se.seq)
# create coordinates for polygon
t.coord <- rbind(cbind(x = overall$b[1],
y = 0),
cbind(x = min(ll95),
y = max(tmp$se)),
cbind(x = max(ul95),
y = max(tmp$se))
) %>%
as.data.frame()
# plot
a <- ggplot(data = tmp,
aes(x = es,
y = se)) +
geom_polygon(data = t.coord,
aes(x = x,
y = y),
fill = "#3366FF",
alpha = .1) +
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
scale_y_reverse(expand = c(.01, 0)) +
scale_x_continuous(limits = c(-1.5, 2.1),
expand = c(.01, .01)) +
geom_vline(xintercept = overall$b[1],
linetype = "dotted") +
labs(x = "Cohen's d",
y = "Standard error")
# delete vestigial
rm(tmp, ll95, ul95, se.seq, t.coord)
##########
# Funnel plot with aggregated dependencies
##########
# create a temporary dataset with standard error (se) values
tmp <- pub.r$rho_0.5$DF.agg %>%
rowwise() %>%
mutate(es = yi,
se = sqrt(vi)) %>%
ungroup()
# calculate overall effect size
tmp.meta <- rma.uni(yi = yi,
vi = vi,
data = tmp,
method = "REML")
# create temporary sequence of ses
se.seq = seq(0, max(tmp$se),
length.out = nrow(tmp))
ll95 = tmp.meta$b[1] - (1.96 * se.seq)
ul95 = tmp.meta$b[1] + (1.96 * se.seq)
# create coordinates for polygon
t.coord <- rbind(cbind(x = tmp.meta$b[1],
y = 0),
cbind(x = min(ll95),
y = max(tmp$se)),
cbind(x = max(ul95),
y = max(tmp$se))
) %>%
as.data.frame()
b <- ggplot(data = tmp,
aes(x = es,
y = se)) +
geom_polygon(data = t.coord,
aes(x = x,
y = y),
fill = "#3366FF",
alpha = .1) +
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
scale_y_reverse(expand = c(.01, 0)) +
scale_x_continuous(limits = c(-1.5, 2.1),
expand = c(.01, .01)) +
geom_vline(xintercept = tmp.meta$b[1],
linetype = "dotted") +
labs(x = "Cohen's d",
y = "")
# delete vestigial
rm(tmp, ll95, ul95, se.seq, t.coord, tmp.meta)
##########
# Plot funnels next to each other plot with aggregated dependencies
##########
plot_grid(a, b,
labels = c("A", "B"))
rm(a, b)
# Chunk 17: vig.desc
# identify total number of vignettes
vig.n <- read.csv(file = "admin/vig/metaware_VigCombined.csv") %>%
nrow()
# Chunk 18: vig
knitr::include_graphics("images/metaware_vigs.png")
# Chunk 19: survey.n
# identify number of participants who completed the survey
survey.n <- read.csv("data/metaware_SurvData_raw.csv") %>%
nrow()
# Chunk 20: mods
knitr::include_graphics("images/metaware_mods.png")
# Chunk 22: modfig
#################
# motivation plot
#################
# get predicted and actual values into a single dataset
mot.df <- predict(mod.r$mot$mod,
addx = T) %>%
as.data.frame() %>%
cbind(.,
yi = mod.r$mot$mod$yi)
# plot
m <- ggplot(data = mot.df,
aes(x = X.mot,
y = yi)) +
# jittered raw data
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
# model derived prediction line
geom_line(aes(y = pred)) +
# model derived CI
geom_ribbon(aes(ymin = ci.lb,
ymax = ci.ub),
alpha = .10,
fill = "#3366FF") +
# adjust labels
labs(y = "Cohen's d",
x = "motivation ratings")
rm(mot.df)
#################
# opportunity plot
#################
# get predicted and actual values into a single dataset
opp.df <- predict(mod.r$opp$mod,
addx = T) %>%
as.data.frame() %>%
cbind(.,
yi = mod.r$opp$mod$yi)
# plot
o <- ggplot(data = opp.df,
aes(x = X.opp,
y = yi)) +
# jittered raw data
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
# model derived prediction line
geom_line(aes(y = pred)) +
# model derived CI
geom_ribbon(aes(ymin = ci.lb,
ymax = ci.ub),
alpha = .10,
fill = "#3366FF") +
# adjust labels
labs(y = "",
x = "opportunity ratings")
rm(opp.df)
#################
# belief plot
#################
# get predicted and actual values into a single dataset
bel.df <- predict(mod.r$bel$mod,
addx = T) %>%
as.data.frame() %>%
cbind(.,
yi = mod.r$bel$mod$yi)
# plot
b <- ggplot(data = bel.df,
aes(x = X.bel,
y = yi)) +
# jittered raw data
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
# model derived prediction line
geom_line(aes(y = pred)) +
# model derived CI
geom_ribbon(aes(ymin = ci.lb,
ymax = ci.ub),
alpha = .10,
fill = "#3366FF") +
# adjust labels
labs(y = "Cohen's d",
x = "belief ratings")
rm(bel.df)
#################
# prediction plot
#################
# get predicted and actual values into a single dataset
pre.df <- predict(mod.r$pre$mod,
addx = T) %>%
as.data.frame() %>%
cbind(.,
yi = mod.r$pre$mod$yi)
# plot
p <- ggplot(data = pre.df,
aes(x = X.pre,
y = yi)) +
# jittered raw data
geom_jitter(alpha = .8,
fill = "dark grey",
color = "dark grey") +
# model derived prediction line
geom_line(aes(y = pred)) +
# model derived CI
geom_ribbon(aes(ymin = ci.lb,
ymax = ci.ub),
alpha = .10,
fill = "#3366FF") +
# adjust labels
labs(y = "",
x = "prediction ratings")
rm(pre.df)
#################
# merge plots
#################
plot_grid(m, o, b, p,
labels = c("A", "B", "C", "D"))
rm(m, o, b, p)
# Chunk 23: mod.sensitivity
# sensitivity analysis
mod.year.sens <-
sapply(X = c("mot", "opp", "bel"),
simplify = F,
FUN = ModAnalysis,
df = DF.es %>%
filter(year > 2012 & # only include studies from past decade
ref.type != "cvz" &
ref.type != "pvz"))
# inspect results
mod.year.sens$mot$mod
mod.year.sens$opp$mod
mod.year.sens$bel$mod
# delete sensitivity analysis
rm(mod.year.sens, survey.n, vig.n)
# Chunk 24: s2.data
# open and clean data
DF.s2 <-
# open data
read_csv(file = "data/metaware_survey2_clean.csv") %>%
# fix variable class
mutate_at(.vars = c("sub", "demand",
"trial", "block.num"),
.funs = as.factor) %>%
# refactor demand  make it easier to interpret
mutate(demand = factor(demand,
levels = c("pos", "nil")))
# Chunk 25: s2.d.int
# allow for Type III Sums of Square
options(contrasts = c('contr.sum', 'contr.poly'))
# test facial feedback by demand interaction
## fit mixed-effects model
m.d <- lmer(happy ~ trial * block.num * demand +
(1 | sub),
data = DF.s2,
#subset = att.chk == 1,
subset = manip.chk == 1)
## omnibus tests
m.d.aov <- anova(m.d)
# simple effect of pose within each level of demand
m.d.joint <- emmeans(m.d, pairwise ~ trial | demand)$contrasts %>%
as.data.frame()
m.d
summary(m.d)
emmeans(m.d, pairwise ~ trial | demand)$contrasts
DF.s2$block.num
DF.s2$block.num %>% class()
DF.s2$block.num %>% contrasts
DF.s2$demand %>% contrasts
m.d@beta[2] / 2
emmeans(m.d, pairwise ~ trial)
m.d@beta[2] * 2
