mod.r$level == "cvz", ]$level = "control v. nil"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvc", ]$level = "control v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvz", ]$level = "nil v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvp", ]$level = "control v. positive"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvn", ]$level = "positive v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvz", ]$level = "positive v. nil"
mod.r[mod.r$mod == "ref.type", ]$mod = "demand comparison"
tmp <- mod.r %>%
# add blank rows after each moderator
group_split(mod) %>%
map_dfr(~ add_row(.x, .after = Inf)) %>%
ungroup() %>%
# add tab to the levels of the moderator
mutate(Moderator =
if_else(is.na(level),
mod,
paste0("  ",
level))
) %>%
relocate(Moderator, .before = mod) %>%
# place fake values (99s) for the moderator analysis rows
mutate(d = if_else(is.na(d),
99,
as.numeric(d)),
LB = if_else(is.na(LB),
99,
as.numeric(LB)),
UB = if_else(is.na(UB),
99,
as.numeric(UB)),
p = if_else(as.numeric(p) > .05,
round(as.numeric(p), 2) %>%
as.character(),
stars.pval(as.numeric(p))
)
) %>%
# select relevant variables
select(Moderator, s, k, d, LB, UB, p) %>%
# create row of column names
add_row(Moderator = "Moderator",
s = "s",
k = "k",
d = 99,
LB = 99,
UB = 99,
p = "p-value",
.before = 1) %>%
add_row(Moderator = NA,
s = NA,
k = NA,
d = 99,
LB = 99,
UB = 99,
p = NA,
.after = 1)
# remove extra row
tmp <- tmp[1 : (nrow(tmp) - 1), ]
View(tmp)
mod.r <- backup
mod.r <- mod.r %>%
# remove publication status moderator
filter(mod != "published") %>%
# re-order moderators
mutate(mod = factor(mod,
levels = c("student",
"online",
"paid",
"design",
"ref.type")),
mod = as.character(mod)) %>%
# remove p-values for the levels
mutate(p = if_else(is.na(level),
p,
""))
View(mod.r)
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvz", ]$level = "control v. nil"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvc", ]$level = "control v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvz", ]$level = "nil v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvp", ]$level = "control v. positive"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvn", ]$level = "positive v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvz", ]$level = "positive v. nil"
mod.r[mod.r$mod == "ref.type", ]$mod = "demand comparison"
mod.r <- backup
# reorder moderator factor
mod.r <- mod.r %>%
# remove publication status moderator
filter(mod != "published") %>%
# re-order moderators
mutate(mod = factor(mod,
levels = c("student",
"online",
"paid",
"design",
"ref.type"))) %>%
# remove p-values for the levels
mutate(p = if_else(is.na(level),
p,
""))
# update labels
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvz", ]$level = "control v. nil"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvc", ]$level = "control v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "nvz", ]$level = "nil v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "cvp", ]$level = "control v. positive"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvn", ]$level = "positive v. negative"
mod.r[!is.na(mod.r$level) &
mod.r$level == "pvz", ]$level = "positive v. nil"
tmp <- mod.r %>%
# add blank rows after each moderator
group_split(mod) %>%
map_dfr(~ add_row(.x, .after = Inf)) %>%
ungroup() %>%
# add tab to the levels of the moderator
mutate(Moderator =
if_else(is.na(level),
mod,
paste0("  ",
level))
) %>%
relocate(Moderator, .before = mod) %>%
# place fake values (99s) for the moderator analysis rows
mutate(d = if_else(is.na(d),
99,
as.numeric(d)),
LB = if_else(is.na(LB),
99,
as.numeric(LB)),
UB = if_else(is.na(UB),
99,
as.numeric(UB)),
p = if_else(as.numeric(p) > .05,
round(as.numeric(p), 2) %>%
as.character(),
stars.pval(as.numeric(p))
)
) %>%
# select relevant variables
select(Moderator, s, k, d, LB, UB, p) %>%
# create row of column names
add_row(Moderator = "Moderator",
s = "s",
k = "k",
d = 99,
LB = 99,
UB = 99,
p = "p-value",
.before = 1) %>%
add_row(Moderator = NA,
s = NA,
k = NA,
d = 99,
LB = 99,
UB = 99,
p = NA,
.after = 1)
tmp <- mod.r %>%
# add blank rows after each moderator
group_split(mod) %>%
map_dfr(~ add_row(.x, .after = Inf)) %>%
ungroup() %>%
# add tab to the levels of the moderator
mutate(Moderator =
if_else(is.na(level),
as.character(mod),
paste0("  ",
level))
) %>%
relocate(Moderator, .before = mod) %>%
# place fake values (99s) for the moderator analysis rows
mutate(d = if_else(is.na(d),
99,
as.numeric(d)),
LB = if_else(is.na(LB),
99,
as.numeric(LB)),
UB = if_else(is.na(UB),
99,
as.numeric(UB)),
p = if_else(as.numeric(p) > .05,
round(as.numeric(p), 2) %>%
as.character(),
stars.pval(as.numeric(p))
)
) %>%
# select relevant variables
select(Moderator, s, k, d, LB, UB, p) %>%
# create row of column names
add_row(Moderator = "Moderator",
s = "s",
k = "k",
d = 99,
LB = 99,
UB = 99,
p = "p-value",
.before = 1) %>%
add_row(Moderator = NA,
s = NA,
k = NA,
d = 99,
LB = 99,
UB = 99,
p = NA,
.after = 1)
View(tmp)
tmp$Moderator
tmp$Moderator %>% class()
tmp[tmp$Moderator == "ref.type", ]$Moderator = "demand comparison"
tmp[!is.na(tmp$Moderator) &
tmp$Moderator == "ref.type", ]$Moderator = "demand comparison"
tmp <- tmp[1 : (nrow(tmp) - 1), ]
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
# add points and error bars
geom_point(shape = "diamond",
size = 3,
colour = '#3366FF') +
geom_errorbarh(height = .5,
colour = '#3366FF') +
# add moderator label
geom_text(aes(label = Moderator),
x = -1.8,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
geom_text(aes(label = k),
x = -.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 1.3,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# limit view of plot
coord_cartesian(xlim=c(-2.4, 2)) +
# create line at 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
# clean up aesthetics
theme_classic() +
scale_x_continuous(limits = c(-2, 2),
n.breaks = 10,
labels = c(rep("", 4),
seq(from = -.5,
to = 1,
by = .5),
rep("", 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "                                                  Cohen's standardized d")
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
# add points and error bars
geom_point(shape = "diamond",
size = 3,
colour = '#3366FF') +
geom_errorbarh(height = .5,
colour = 'darkred')
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
# add points and error bars
geom_point(shape = "diamond",
size = 3,
colour = 'darkred') +
geom_errorbarh(height = .5,
colour = 'darkred') +
# add moderator label
geom_text(aes(label = Moderator),
x = -1.8,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
geom_text(aes(label = k),
x = -.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 1.3,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# limit view of plot
coord_cartesian(xlim=c(-2.4, 2)) +
# create line at 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
# clean up aesthetics
theme_classic() +
scale_x_continuous(limits = c(-2, 2),
n.breaks = 10,
labels = c(rep("", 4),
seq(from = -.5,
to = 1,
by = .5),
rep("", 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "                                                  Cohen's standardized d")
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
# add points and error bars
geom_point(shape = "diamond",
size = 3,
colour = '#8C1515') +
geom_errorbarh(height = .5,
colour = '#8C1515') +
# add moderator label
geom_text(aes(label = Moderator),
x = -1.8,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
geom_text(aes(label = k),
x = -.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 1.3,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# limit view of plot
coord_cartesian(xlim=c(-2.4, 2)) +
# create line at 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
# clean up aesthetics
theme_classic() +
scale_x_continuous(limits = c(-2, 2),
n.breaks = 10,
labels = c(rep("", 4),
seq(from = -.5,
to = 1,
by = .5),
rep("", 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "                                                  Cohen's standardized d")
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)),
x = d,
xmin = LB,
xmax = UB)) +
# add points and error bars
geom_point(shape = "diamond",
size = 3,
colour = '#FFC000') +
geom_errorbarh(height = .5,
colour = '#FFC000') +
# add moderator label
geom_text(aes(label = Moderator),
x = -1.8,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add s label
geom_text(aes(label = s),
x = -1,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add k label
geom_text(aes(label = k),
x = -.75,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# add p-value label
geom_text(aes(label = p),
x = 1.3,
hjust = 0,
fontface = c("bold",
rep(x= "plain",
times = nrow(tmp) - 1)
),
) +
# limit view of plot
coord_cartesian(xlim=c(-2.4, 2)) +
# create line at 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dashed",
alpha = .5) +
# clean up aesthetics
theme_classic() +
scale_x_continuous(limits = c(-2, 2),
n.breaks = 10,
labels = c(rep("", 4),
seq(from = -.5,
to = 1,
by = .5),
rep("", 2))) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_blank()) +
labs(x = "                                                  Cohen's standardized d")
