es <- sqrt((2 * fval * (1- corr)) / n.1);
return(es)
}
# Chunk 14: EsVarWitn
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsVarWitn <- function(n.1, es){
es.var <- ((1 / n.1) +
((es^2) / (2 * n.1))) *
2 * (1 - corr);
return(es.var)
}
# Chunk 15: w: call functions to calculate d
for (i in 1:nrow(DF)) {
if (DF$design[i] == "within"){
# call EsWitnMean on cases with within-subject designs and *means*
if(DF$es.calc[i] == "m_sd") {
DF$es[i] <- EsWitnMean(m.1 = DF$m.1[i],
sd.1 = DF$sd.1[i],
m.2 = DF$m.2[i],
sd.2 = DF$sd.2[i],
corr = corr)
}
# call EsWitnTval on cases with within-subject designs and *t-values*
if (DF$es.calc[i] == "t") {
DF$es[i] <- EsWitnTval(n.1 = DF$n.1[i],
tval = DF$tval[i],
corr = corr)
}
# call EsWitnFval on cases with within-subject designs and *F-values*
if (DF$es.calc[i] == "f") {
DF$es[i] <- EsWitnFval(n.1 = DF$n.1[i],
fval = DF$fval[i],
corr = corr)
}
# call EsVarWitn on cases with within subject designs
DF$es.var[i] <- EsVarWitn(n.1 = DF$n.1[i],
es = DF$es[i])
}
}
# Chunk 16: del var
# delete objects we no longer need
rm(corr, i,
EsBetwFval, EsBetwMean, EsBetwTval,
EsBetwPval, EsVarBetw, EsVarWitn,
EsWitnFval, EsWitnMean, EsWitnTval,
EsBetwCount, EsVarBetwCount)
rm(DF.backup)
# Chunk 1: setup and load packages
# load libraries
library("tidyverse")
library("readxl")
library("performance")
library("lme4")
# Chunk 2: open/clean data
# import data
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "coding",
na = c("NA"))
# change ref.type pvc to cvp (for aesthetics)
DF[DF$ref.type == "pvc", ]$ref.type = "cvp"
DF <- DF %>%
# remove reference columns (these are for documentation purposes only)
select(-ends_with("ref")) %>%
# remove variables we won't include in any analyses
select(-c(dv, note, outcome)) %>%
# create ref.r var that indicates whether there were one or two demand conditions
## if the ref.type variable included a "c", it means that
## there was one demand condition compared to a control group
mutate(ref.r =
if_else(condition = ref.type == "cvp" |
ref.type == "nvc" |
ref.type == "cvz",
true = "single",
false = "double")) %>%
# create study and es_id columns
rename(id.study = id) %>%
mutate(id.es = 1 : nrow(DF))
# create blank columns for effect size and effect size variance
# Note: these pre-existing columns are necessary for the
# Cohen's d functions (defined later) to work
DF$es <- NA
DF$es.var <- NA
# Chunk 3: define function EsBetwMean
# formula: Cooper, Hedges, & Valentine, 2009; p. 226
EsBetwMean <- function(n.1, m.1, sd.1,
n.2, m.2, sd.2){
sd.within <- sqrt((((n.1 - 1) * (sd.1^2)) +
((n.2 - 1) * (sd.2^2))) /
(n.1 + n.2 - 2));
es <- (m.1 - m.2) / sd.within;
return(es)
}
# Chunk 4: define function EsBetwTval
# formula: Cooper, Hedges, & Valentine, 2009; p. 228
EsBetwTval <- function(n.1, n.2, tval){
es <- tval * sqrt((n.1 + n.2) /
(n.1 * n.2));
return(es)
}
# Chunk 5: define function EsBetwFval
# formula: Cooper, Hedges, & Valentine, 2009; p. 228
EsBetwFval <- function(n.1, n.2, fval){
es <- sqrt((fval * (n.1 + n.2)) /
(n.1 * n.2));
return(es)
}
# Chunk 6: define function EsBetwPval
# formula: Cooper, Hedges, & Valentine, 2009; p. 228
EsBetwPval <- function(n.1, n.2, pval){
# calculate the inverse of the cumulative distribution function of t
t.inv <- qt(p = (pval / 2),
df = (n.1 + n.2 - 2),
lower.tail = FALSE);
es <- t.inv * sqrt((n.1 + n.2) /
(n.1 * n.2));
return(es)
}
# Chunk 7: define function EsVarBetw
# formula: Cooper, Hedges, & Valentine, 2009; p. 228
EsVarBetw <- function(n.1, n.2, es){
es.var <- ((n.1 + n.2) / (n.1 * n.2)) +
((es^2) / (2 * (n.1 + n.2)));
return(es.var)
}
# Chunk 8: define functions EsBetwCount and EsVarBetwCount
# cohen's d
EsBetwCount <- function(n.1, n.2, count.1, count.2){
# calculate odds ratio
# formula: Borenstein et al. 2011; p. 36; Equation 5.8
or <- (count.1 * (n.2 - count.2)) /
((n.1 - count.1) * count.2);
# calculate log odds ratio
# formula: Borenstein et al. 2011; p. 36; Equation 5.9
log.or = log(or);
# convert log odds ratio to Cohen's d
# formula: Borenstein et al. 2011; p . 47 Equation 7.1
es <- log.or * (sqrt(3) / pi);
return(es)
}
# variance of cohen's d
EsVarBetwCount <- function(n.1, n.2, count.1, count.2){
# calculate log odds ratio variance
# formula: Borenstein et al. 2011; p. 36; Equation 5.10
log.or.var = (1 / count.1) +
(1 / (n.2 - count.2)) +
(1 / (n.1 - count.1)) +
(1 / count.2);
# convert log odds ratio variance to variance of Cohen's d
# formula: Borenstein et al. 2011; p. 47 Equation 7.2
es.var = log.or.var * (3 / pi^2);
return(es.var)
}
# Chunk 9: b: call functions to calculate d
for (i in 1:nrow(DF)) {
if (DF$design[i] == "between"){
# call EsBetwMean on cases with between-subject designs and *means*
if (DF$es.calc[i] == "m_sd") {
DF$es[i] <- EsBetwMean(n.1 = DF$n.1[i],
m.1 = DF$m.1[i],
sd.1 = DF$sd.1[i],
n.2 = DF$n.2[i],
m.2 = DF$m.2[i],
sd.2 = DF$sd.2[i])
}
# call EsBetwTval on cases with between-subject designs and *t-values*
if (DF$es.calc[i] == "t") {
DF$es[i] <- EsBetwTval(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
tval = DF$tval[i])
}
# call EsBetwFval on cases with between-subject designs and *F-values*
if (DF$es.calc[i] == "f") {
DF$es[i] <- EsBetwFval(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
fval = DF$fval[i])
}
# call EsBetwPval on cases with between-subject designs and *p-values*
if (DF$es.calc[i] == "p") {
DF$es[i] <- EsBetwPval(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
pval = DF$pval[i])
}
# call EsBetwCount and EsVarBetwCount on cases with between-subject designs and *count data*
if (DF$es.calc[i] == "or") {
DF$es[i] <- EsBetwCount(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
count.1 = DF$count.1[i],
count.2 = DF$count.2[i])
DF$es.var[i] <- EsVarBetwCount(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
count.1 = DF$count.1[i],
count.2 = DF$count.2[i])
}
# call EsVarBetw on cases with continuous data and a between subject designs
if (DF$es.calc[i] != "or"){
DF$es.var[i] <- EsVarBetw(n.1 = DF$n.1[i],
n.2 = DF$n.2[i],
es = DF$es[i])
}
}
}
# Chunk 10: assumed correlation
# if no correlation is defined, set it at .5
# Note: there is sensitivity analysis code that will set a correlation and then re-execute this script (metaware_DataProcessingSens.Rmd)
if(!exists("corr")){
corr <- .5
}
# Chunk 11: EsWitnMean
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
# formula for imputing sd.diff:
# http://handbook.cochrane.org/chapter_16/16_4_6_1_mean_differences.htm
EsWitnMean <- function(m.1, sd.1, m.2, sd.2, corr){
sd.diff <- sqrt((sd.1^2) + (sd.2^2) -
(2 * corr * sd.1 * sd.2));
es <- ((m.1 - m.2) / sd.diff) * sqrt(2 * (1- corr));
return(es)
}
# Chunk 12: EsWitnTval
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsWitnTval <- function(n.1, tval, corr){
es <- tval * sqrt((2 * (1 - corr)) / n.1);
return(es)
}
# Chunk 13: EsWitnFval
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsWitnFval <- function(n.1, fval, corr){
es <- sqrt((2 * fval * (1- corr)) / n.1);
return(es)
}
# Chunk 14: EsVarWitn
# formula: Cooper, Hedges, & Valentine, 2009; p. 229
EsVarWitn <- function(n.1, es){
es.var <- ((1 / n.1) +
((es^2) / (2 * n.1))) *
2 * (1 - corr);
return(es.var)
}
# Chunk 15: w: call functions to calculate d
for (i in 1:nrow(DF)) {
if (DF$design[i] == "within"){
# call EsWitnMean on cases with within-subject designs and *means*
if(DF$es.calc[i] == "m_sd") {
DF$es[i] <- EsWitnMean(m.1 = DF$m.1[i],
sd.1 = DF$sd.1[i],
m.2 = DF$m.2[i],
sd.2 = DF$sd.2[i],
corr = corr)
}
# call EsWitnTval on cases with within-subject designs and *t-values*
if (DF$es.calc[i] == "t") {
DF$es[i] <- EsWitnTval(n.1 = DF$n.1[i],
tval = DF$tval[i],
corr = corr)
}
# call EsWitnFval on cases with within-subject designs and *F-values*
if (DF$es.calc[i] == "f") {
DF$es[i] <- EsWitnFval(n.1 = DF$n.1[i],
fval = DF$fval[i],
corr = corr)
}
# call EsVarWitn on cases with within subject designs
DF$es.var[i] <- EsVarWitn(n.1 = DF$n.1[i],
es = DF$es[i])
}
}
DF.5 <- DF
rm(list = ls())
# Chunk 1: setup
# load writing and data processing packages
library("papaja")
library("tidyverse")
library("readxl")
library("cowplot")
# load meta-analyses packages
library("metafor")
library("weightr")
library("PublicationBias")
# load mixed-effect regression packages
library("lme4")
library("lmerTest")
library("emmeans")
# identify paper references
r_refs("r-references.bib")
# turn scientific notation off
options(scipen = 999)
# set seed to year of lead author's favorite [unfinished] album, SMiLE
set.seed(1967)
# set theme
theme_set(theme_classic())
# Chunk 3: literature search
# open and process literature search data
DF.s <-
# open data
read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening") %>%
# identify
# unpublished dissertations by identifying links that contain the word 'dissertation' AND
# records identified manually by identify links that contain 'NA'
mutate(unpub =
if_else(condition = grepl("dissertation", link) |
link == "NA",
true = 1,
false = 0)
)
# calculate number of records from PsycInfo by removing all records with no known database (i.e., ones that were personally found)
r.pub <- DF.s %>%
filter(unpub == 0) %>%
nrow()
# calculate number of unpublished records (i.e., dissertations)
r.unp <- DF.s %>%
filter(unpub == 1) %>%
nrow()
# Chunk 4: final.df
# open clean effect size data
DF.es <-
read_csv(file = "data/metaware_meta_clean.csv")
# identify total number of studies (denoted by id.study column)
num.s <- DF.es$id.study %>%
unique() %>%
length()
# identify total number of papers (denoted by name column)
num.p <- DF.es$name %>%
unique() %>%
length()
# for the known outlier (id = 18), give an example of the largest effect size
outlier.es <- DF.es %>%
filter(id.study == 18) %>%
summarise(max.es = min(es)) %>% #  using min because largest value is neg
round(2)
# Chunk 5: clean.env.1
# remove outlier and re-initialize id factors
DF.es <- DF.es %>%
filter(id.study != 18) %>%
mutate(id.study = factor(id.study),
id.es = factor(id.es))
# clean environment
rm(DF.s, r.pub, r.unp, num.s, num.p, outlier.es)
sens.df.list <- list.files(path = "./data/r_sensitivity")
sens.df.list
# Chunk 1: setup and load packages
# load libraries
library("tidyverse")
library("readxl")
library("performance")
library("lme4")
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "coding",
na = c("NA"))
tmp <- DF %>%
filter(MW_include == 1)
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening",
na = c("N/A"))
DF$MW_include %>%
unique()
DF$MW_rationale %>%
unique()
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening",
na = c("N/A"))
DF$MW_include %>%
unique()
DF$MW_rationale %>%
unique()
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening",
na = c("N/A"))
DF$MW_include %>%
unique()
DF$MW_rationale %>%
unique()
DF %>%
filter(is.na(MW_rationale)) %>% View()
DF %>%
filter(MW_rationale == "NA")
DF$NC_include %>%
unique()
DF$NC_rationale %>%
unique()
tmp <- DF %>%
filter(MW_include == 1)
tmp %>%
group_by(NC_include) %>%
summarise(n = n())
tmp %>%
filter(is.na(NC_include)) %>%
View()
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening",
na = c("N/A"))
DF$MW_include %>%
unique()
DF$MW_rationale %>%
unique()
DF$NC_include %>%
unique()
DF$NC_rationale %>%
unique()
tmp <- DF %>%
filter(MW_include == 1)
tmp %>%
group_by(NC_include) %>%
summarise(n = n())
DF %>%
filter(NC_includ == 1) %>%
nrow()
DF %>%
filter(NC_include == 1) %>%
nrow()
D2F <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "coding",
na = c("N/A"))
D2F$id %>% unique %>% nrow()
D2F$id
D2F$id %>% unique
D2F$id %>% unique %>% length
DF %>%
filter(NC_include == 1) %>%
nrow()
D2F$name %>% unique %>% length
s <- DF %>%
filter(NC_include == 1) %>%
select(title)
s
s <- DF %>%
filter(NC_include == 1) %>%
select(title) %>%
arrange(title)
s <- DF %>%
filter(NC_include == 1) %>%
select(title) %>%
arrange(title)
c <- D2F %>%
select(name) %>%
arrange(name)
c <- D2F %>%
unique(name)
c <- D2F$name %>%
unique()
c
s <- DF %>%
filter(NC_include == 1) %>%
select(title) %>%
arrange(title) %>%
as.vector()
View(s)
s <- DF %>%
filter(NC_include == 1) %>%
select(title) %>%
arrange(title)
s
cbind(s,c)
merge(s, c)
s.c <- merge(s, c)
View(s.c)
rm(s.c)
View(s)
View(c)
c
c %>% View()
c %>% as.data.frame %>% View()
c <- D2F$name %>%
as.data.frame
c
c %>% View()
c <- D2F$name %>%
as.data.frame %>%
arrange(.)
c %>% View()
DF <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening",
na = c("N/A"))
# check that the include numbers are correct
DF$MW_include %>%
unique()
DF$MW_rationale %>%
unique()
DF$NC_include %>%
unique()
DF$NC_rationale %>%
unique()
# check that NC didn't miss anything
tmp <- DF %>%
filter(MW_include == 1)
tmp %>%
group_by(NC_include) %>%
summarise(n = n())
# check that the number of records that NC said would be include actually matches how many were in there
DF %>%
filter(NC_include == 1) %>%
nrow()
D2F <- read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "coding",
na = c("N/A"))
D2F$name %>% unique %>% length
c <- D2F %>%
select(name)
arrange(name)
D2F$name
c <- D2F %>%
select(name)
c %>% View()
c <- D2F %>%
select(name) %>%
arrange(name)
s %>% View()
c %>% View()
c <- D2F %>%
select(name) %>%
distinct(name) %>%
arrange(name)
c %>% View
