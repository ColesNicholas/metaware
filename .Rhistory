unique() %>%
length()
# identify total number of papers (denoted by name column)
num.p <- DF.es$name %>%
unique() %>%
length()
# for the known outlier (id = 18), give an example of the largest effect size
outlier.es <- DF.es %>%
filter(id.study == 18) %>%
summarise(max.es = min(es)) %>% #  using min because largest value is neg
round(2)
# Chunk 5: clean.env.1
# remove outlier and re-initialize id factors
DF.es <- DF.es %>%
filter(id.study != 18) %>%
mutate(id.study = factor(id.study),
id.es = factor(id.es))
# clean environment
rm(DF.s, r.pi, r.unp, num.s, num.p, outlier.es)
# Chunk 6: corr.sens
# examine how assumed repeated measures correlation impacts general pattern of results
# get list of sensitivity dataframes
sens.df.list <- list.files(path = "./data/r_sensitivity")
# (1) open dataframe, (2) compute intercept-only model, (3) extract overall es
sens.res <-
sapply(X = sens.df.list,
FUN = function(i){
# open data
df <- read.csv(paste0("data/r_sensitivity/",
i)
)
# fit model
m <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# return overall es as a number
m$b %>%
as.numeric() %>%
return()
}
)
# compute range of es values
sens.range <- max(sens.res) - min(sens.res)
# delete vestigial
rm(sens.df.list, sens.res)
# Chunk 7: mult.eff
# calculate percentage of studies with multiple effect sizes
mult.eff.per <- DF.es %>%
# identify number of effect sizes for each study (id)
group_by(id.study) %>%
count() %>%
# code whether each study has more than one effect size
mutate(dep = if_else(condition = n > 1,
true = 1,
false = 0)
) %>%
# calculate proportion of studies with more than one effect size
ungroup() %>%
summarise(mult.eff = mean(dep)) %>%
# export as percentage
as.numeric() %>%
round(digits = 2) * 100
# Chunk 8: clean.env.2
# delete vestigial
rm(mult.eff.per, vig.n, survey.n, sens.range)
# Chunk 9: overall
# estimate overall effect size
overall <-
rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# estimate standard deviation of effect size distribution (i.e., Tau)
# to do so, combine both sources of estimated variability in the model
tau <- sqrt(overall$sigma2[1] + overall$sigma2[2])
# estimate proportion of hypothesis-consistent and inconsistent responding
# -0.10 < d > 0.10 is the arbitrary threshold for saying it's neither consistent or inconsistent
h.c <- pnorm(q = .10,
mean = overall$b,
sd = tau,
lower.tail = F) %>%
round(2) * 100
h.i <- pnorm(q = (-.10),
mean = overall$b,
sd = tau,
lower.tail = T) %>%
round(2) * 100
# estimate lower and upper bound of effect size distribution
dist.min <- rnorm(n = 1000000,
mean = overall$b,
sd = tau) %>%
min() %>%
round(digits = 2)
dist.max <- rnorm(n = 1000000,
mean = overall$b,
sd = tau) %>%
max() %>%
round(digits = 2)
# Chunk 11: forest
# create a temporary dataset containing effect sizes and 95% CI's
tmp <- DF.es %>%
rowwise() %>%
mutate(se = sqrt(es.var),
ub = es + (se * 1.96),
ub = round(ub, 2),
lb = es - (se * 1.96),
lb = round(lb, 2),
es = round(es, 2)) %>%
ungroup() %>%
arrange(es, id.study)
# create a forest plot w/ distribution overlay
ggplot(data= tmp,
aes(y = rev(1: nrow(tmp)) * 0.007692308,
x = es,
xmin = lb,
xmax = ub)) +
#hypothesis inconsistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, -.10)) +
# negligible effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "grey80",
alpha = .25,
xlim = c(-.10, .10)) +
# hypothesis consistent effects
## area
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#00998a",
alpha = .25,
xlim = c(.10, 2)) +
# create dotted line at d = 0
geom_vline(xintercept = 0,
color = "black",
linetype = "dotted",
alpha = .5,
size =.5)  +
# add points and error bars
geom_point(shape = "diamond",
size = 1,
#colour = "black",
#alpha = .75,
alpha = .8,
color = "dark grey") +
geom_errorbarh(height = .005,
#colour = 'black',
size = .1,
#alpha = .75,
alpha = .8,
color = "dark grey") +
# add citation label
geom_text(aes(label = citation),
x = -2.7,
hjust = 0,
size = 1) +
# add CI label
geom_text(aes(label = paste0(es,
" [", lb, ", ", ub, "]")),
x = 3.9,
size = 1,
hjust = 1) +
# remove y-axis and fix x-axis name
# theme(axis.title.y = element_blank(),
#       axis.text.y = element_blank(),
#       axis.ticks.y = element_blank(),
#       axis.line.y = element_blank()) +
labs(x = "Cohen's d",
y = "density") +
# increase plotting area
scale_x_continuous(limits = c(-2.7, 4),
breaks = seq(from = -2, to = 3, by = 1),
expand = c(.01, .01)) +
scale_y_continuous(expand = c(.005, 0))
# Chunk 12: mod
# create moderator analysis function
ModAnalysis = function(m, df = DF.es) {
# set dataset
df <- df
# moderator analysis
mod.m <- rma.mv(yi = es,
V = es.var,
data = df,
random = ~ 1 | id.study / id.es,
mods = as.formula(paste0("~ ", m)),
test= "t")
sub.m <- rma.mv(yi = es,
V = es.var,
data = df,
random = ~ 1 | id.study / id.es,
mods = as.formula(paste0("~ 0 + ", m)),
test= "t")
# return results as list
return(list(mod = mod.m,
sub = sub.m))
}
# conduct moderator and subgroup analyses for moderators assessed with full dataset
mod.l <- c("student", "paid", "online",
"design", "ref.r", "published",
"year")
mod.r <-
sapply(X = mod.l,
simplify = F,
FUN = ModAnalysis)
rm(mod.l)
# test ref.type moderator in scenarios where there is a control comparison (i.e., ref.r == single)
mod.r[["ref.type"]] <-
ModAnalysis(m = "ref.type",
df = DF.es[DF.es$ref.r == "single", ])
# add motivation, opportunity, belief, and prediction moderators
## Note: comparisons with nil-demand conditions are excluded
mod.r.2 <-
sapply(X = c("mot", "opp", "bel", "pre"),
simplify = F,
FUN = ModAnalysis,
df = DF.es %>%
filter(ref.type != "cvz" &
ref.type != "pvz"))
## combine results
mod.r = c(mod.r, mod.r.2)
# delete vestigial
rm(mod.r.2)
# Chunk 13
# calculate percentage of online effect sizes that had students vs. non-students
in.s <- DF.es[DF.es$online == "no", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
on.s <- DF.es[DF.es$online == "yes", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[2, 2] %>%
round(2) * 100
# calculate percentage of paid effect sizes with students vs. non-students
v.s <- DF.es[DF.es$paid == "no", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[3, 2] %>%
round(2) * 100
p.s <- DF.es[DF.es$paid == "yes", ]$student %>%
table() %>%
prop.table() %>%
as.data.frame() %>%
.[2, 2] %>%
round(2) * 100
# unconfounded analysis
## set Type 3 SS
options(contrasts = c('contr.sum',
'contr.poly'))
m.sens <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es,
mods = ~ student + paid + online,
test= "t")
m.sens.student <- anova(m.sens, btt = c(2, 3))
m.sens.online <- anova(m.sens, btt = c(5))
m.sens.pay <- anova(m.sens, btt = c(4))
DF.es %>% names
m <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es,
mods = ~ student + paid + online + ref.type,
test = "t")
m
?emmeans
View(mod.r)
mod.r[["student"]][["sub"]]
mod.r$student$sub$beta
mod.r$student$sub$ci.lb
cbind(mod.r$student$sub$beta,
mod.r$student$sub$ci.lb,
mod.r$student$sub$ci.ub)
mod.r$student$sub$ci.ub
mod.r$student$sub
mod.r$student$sub %>% summary
tmp <- mod.r$student$sub %>% summary
tmp
tmp %>% View()
mod.r$student$sub %>% as.data.frame()
mod.r$design
cbind(mod.r$design$sub$beta,
mod.r$design$sub$ci.lb,
mod.r$design$sub$ci.ub)
mod.r$design
ref.r <-
cbind(mod.r$ref.r$sub$beta,
mod.r$ref.r$sub$ci.lb,
mod.r$ref.r$sub$ci.ub)
ref.r
ref.type <-
cbind(mod.r$ref.type$sub$beta,
mod.r$ref.type$sub$ci.lb,
mod.r$ref.type$sub$ci.ub)
ref.type
rbind(design, ref.type)
design <-
cbind(mod.r$design$sub$beta,
mod.r$design$sub$ci.lb,
mod.r$design$sub$ci.ub)
ref.type <-
cbind(mod.r$ref.type$sub$beta,
mod.r$ref.type$sub$ci.lb,
mod.r$ref.type$sub$ci.ub)
rbind(design, ref.type)
student <-
cbind(mod = "student",
mod.r$student$sub$beta,
mod.r$student$sub$ci.lb,
mod.r$student$sub$ci.ub)
student
student <-
cbind(mod = "student",
b = mod.r$student$sub$beta,
lb = mod.r$student$sub$ci.lb,
ub = mod.r$student$sub$ci.ub)
student
?rownames_to_column
ref.type <-
cbind(mod = "ref.type",
b = mod.r$ref.type$sub$beta,
lb = mod.r$ref.type$sub$ci.lb,
ub = mod.r$ref.type$sub$ci.ub) %>%
rownames_to_column(var = "level")
ref.type <-
cbind(mod = "ref.type",
b = mod.r$ref.type$sub$beta,
lb = mod.r$ref.type$sub$ci.lb,
ub = mod.r$ref.type$sub$ci.ub) %>%
as.data.frame()
rownames_to_column(var = "level")
ref.type <-
cbind(mod = "ref.type",
b = mod.r$ref.type$sub$beta,
lb = mod.r$ref.type$sub$ci.lb,
ub = mod.r$ref.type$sub$ci.ub) %>%
as.data.frame() %>%
rownames_to_column(var = "level")
ref.type
mod.list <- c("design", "ref.type")
ModFunnelFun <- function(x){
cbind(mod = x,
b = mod.r[[x]]$sub$beta,
lb = mod.r[[x]]$sub$ci.lb,
ub = mod.r[[x]]$sub$ci.ub)
}
lapply(X = mod.list,
FUN = ModFunnelFun)
mod.df %>% as.data.frame()
mod.df <- lapply(X = mod.list,
FUN = ModFunnelFun)
mod.df %>% as.data.frame()
?apply(array, margin, ...)
mod.df <- apply(X = mod.list,
FUN = ModFunnelFun)
mod.list
apply(X = mod.list,
MARGIN = 1,
FUN = ModFunnelFun)
apply(X = mod.list,
MARGIN = 2,
FUN = ModFunnelFun)
apply(X = mod.list,
MARGIN = c(1,2),
FUN = ModFunnelFun)
?lapply
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
x
?lapply
sapply(X = mod.list,
FUN = ModFunnelFun)
mod.df <- lapply(X = mod.list,
FUN = ModFunnelFun)
m
mod.df
mod.df <- sapply(X = mod.list,
FUN = ModFunnelFun)
mod.df
# Chunk 1: setup
# load packages writing and data processing packages
library("papaja")
library("tidyverse")
library("readxl")
library("cowplot")
# load meta-analyses packages
library("metafor")
library("weightr")
library("PublicationBias")
# load mixed-effect regression packages
library(lme4)
library(lmerTest)
library(emmeans)
# identify refs
r_refs("r-references.bib")
# turn scientific notation off
options(scipen = 999)
# set theme
theme_set(theme_classic())
# Chunk 2: framework
knitr::include_graphics("images/metaware_framework.png")
# Chunk 3: literature search
# open and process literature search data
DF.s <-
# open data
read_xlsx(path = "data/metaware_EsData_raw.xlsx",
sheet = "records.screening") %>%
# identify unpublished dissertations by identifying links that contain the word 'dissertation'
mutate(dissertation =
if_else(condition = grepl("dissertation", link),
true = 1,
false = 0)
)
# calculate number of records from PsycInfo by removing all records with no known database (i.e., ones that were personally found)
r.pi <- DF.s %>%
filter(!is.na(Database)) %>%
nrow()
# calculate number of unpublished records (i.e., dissertations)
r.unp <- DF.s %>%
filter(dissertation == 1) %>%
nrow()
# Chunk 4: final.df
# open clean effect size data
DF.es <-
read_csv(file = "data/metaware_data_clean.csv")
# identify total number of studies (denoted by id.study column)
num.s <- DF.es$id.study %>%
unique() %>%
length()
# identify total number of papers (denoted by name column)
num.p <- DF.es$name %>%
unique() %>%
length()
# for the known outlier (id = 18), give an example of the largest effect size
outlier.es <- DF.es %>%
filter(id.study == 18) %>%
summarise(max.es = min(es)) %>% #  using min because largest value is neg
round(2)
# Chunk 5: clean.env.1
# remove outlier and re-initialize id factors
DF.es <- DF.es %>%
filter(id.study != 18) %>%
mutate(id.study = factor(id.study),
id.es = factor(id.es))
# clean environment
rm(DF.s, r.pi, r.unp, num.s, num.p, outlier.es)
# Chunk 6: corr.sens
# examine how assumed repeated measures correlation impacts general pattern of results
# get list of sensitivity dataframes
sens.df.list <- list.files(path = "./data/r_sensitivity")
# (1) open dataframe, (2) compute intercept-only model, (3) extract overall es
sens.res <-
sapply(X = sens.df.list,
FUN = function(i){
# open data
df <- read.csv(paste0("data/r_sensitivity/",
i)
)
# fit model
m <- rma.mv(yi = es,
V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# return overall es as a number
m$b %>%
as.numeric() %>%
return()
}
)
# compute range of es values
sens.range <- max(sens.res) - min(sens.res)
# delete vestigial
rm(sens.df.list, sens.res)
# Chunk 7: mult.eff
# calculate percentage of studies with multiple effect sizes
mult.eff.per <- DF.es %>%
# identify number of effect sizes for each study (id)
group_by(id.study) %>%
count() %>%
# code whether each study has more than one effect size
mutate(dep = if_else(condition = n > 1,
true = 1,
false = 0)
) %>%
# calculate proportion of studies with more than one effect size
ungroup() %>%
summarise(mult.eff = mean(dep)) %>%
# export as percentage
as.numeric() %>%
round(digits = 2) * 100
# Chunk 8: clean.env.2
# delete vestigial
rm(mult.eff.per, vig.n, survey.n, sens.range)
DF.es$ref.type %>% unique()
