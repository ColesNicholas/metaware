V = es.var,
data = DF.es,
random = ~ 1 | id.study / id.es)
# estimate standard deviation of effect size distribution (i.e., Tau)
# to do so, combine both sources of estimated variability in the model
tau <- sqrt(overall$sigma2[1] + overall$sigma2[2])
# estimate proportion of hypothesis-consistent and inconsistent responding
# -0.10 < d > 0.10 is the arbitrary threshold for saying it's neither consistent or inconsistent
h.c <- pnorm(q = .10,
mean = overall$b,
sd = tau,
lower.tail = F) %>%
round(digits = 2) * 100
h.i <- pnorm(q = (-.10),
mean = overall$b,
sd = tau,
lower.tail = T) %>%
round(digits = 2) * 100
# estimate lower and upper bound of effect size distribution
dist <- rnorm(n = 1000000,
mean = overall$b,
sd = tau)
dist.min <- dist %>%
min() %>%
round(digits = 2)
dist.max <- dist %>%
max() %>%
round(digits = 2)
rm(dist)
install.packages('osfr')
library('osfr')
?read.csv2
read.csv(file = 'https://osf.io/download/sk4qz/')
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
View(DF.la)
?if_else
DF.la <- DF.la %>%
mutate(es2 = if_else(condition = sign.dir == 'neg',
true = es * -1,
false = es))
DF.la <- DF.la %>%
mutate(es2 = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d))
View(DF.la)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# prepare data for meta-analysis
DF.la <- DF.la %>%
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d))
DF.la <- DF.la %>%
filter(!is.na(d))
View(DF.la)
DF.la <- DF.la %>%
filter(!is.na(d),
!is.na(n1),
!is.na(n2))
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
rlang::last_error()
DF.la$n1 %>% class
DF.la$d %>% class
DF.la$n1
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2))
DF.la$n1
DF.la$n1 %>% numeric
DF.la$n1 %>% as.numeric
DF.la$n1
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct class of variables
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2))
View(DF.la)
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct class of variables
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2))
View(DF.la)
tmp <- DF.la %>% select(n1) %>% filter(is.na(n1))
View(tmp)
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2))
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
DF.la <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2))
DF.la %>% filter(is.na(n1b))
DF.la %>% filter(is.na(n1b)) %>% View()
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
View(DF.la)
tmp <- DF.la %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2))
View(tmp)
View(DF.la)
tmp <- DF.la %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2))
tmp <- DF.la %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2))
tmp <- DF.la %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d))
tmp <- DF.la %>%
# correct class of variables
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
rm(tmp)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
DF.la <- DF.la %>%
# correct class of variables
# Note: you will lose observations where there are no values here
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
DF.la <- DF.la %>%
# correct class of variables
# Note: you will lose observations where there are no values here
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d))
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/')
# process data
tmp <- DF.la %>%
# correct class of variables
# Note: you will lose observations where there are no values here
mutate(n1b = as.numeric(n1),
n2b= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d))
tmp$n1 %>% class
tmp <- DF.la %>%
# correct class of variables
# Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
# open and process Cohen's d data from Lovakov & Agadullina, 2021; EJSP
## file and codebook available at https://osf.io/8cgfe/
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
DF.la
DF.la$study.id %>% class
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
View(overall)
View(DF.es)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
) %>%
# create effect size identifier
mutate(id.es = 1 : nrow(DF.la))
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
) %>%
# create effect size identifier
mutate(id.es = 1 : nrow(DF.la),
id.es = factor(id.es))
View(DF.la)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
) %>%
# create effect size identifier
mutate(id.es = 1 : nrow(.),
id.es = factor(id.es))
View(DF.la)
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
) %>%
# create effect size identifier
mutate(id.es = 1 : nrow(.))
View(DF.la)
DF.la %>% arrange(es.id)
DF.la %>% arrange(es.id) %>% View()
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id),
es.id = factor(es.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
overall.la <-
rma.mv(yi = d,
V = d.var,
data = DF.la,
random = ~ 1 | study.id / es.id)
DF.la$study.id
DF.la$study.id %>% is.na()
DF.la$study.id %>% is.na() %>% any
DF.la %>% filter(is.na(study.id))
DF.la %>% filter(is.na(study.id)) %>% View()
# open and process Cohen's d data from Lovakov & Agadullina, 2021; EJSP
## file and codebook available at https://osf.io/8cgfe/
DF.la <- read.csv(file = 'https://osf.io/download/sk4qz/') %>%
# correct class of variables
## Note: you will lose observations where there are no values here
mutate(n1 = as.numeric(n1),
n2= as.numeric(n2),
study.id = factor(study.id),
es.id = factor(es.id)) %>%
# limit to observations where you can compute d and var.d
filter(!is.na(d),
!is.na(n1),
!is.na(n2)) %>%
# limit to observations where you can identify study
filter(!is.na(study.id)) %>%
# correct sign of cohen's d
mutate(d = if_else(condition = sign.dir == 'neg',
true = d * -1,
false = d)) %>%
# calculate variance of d
mutate(d.var =
((n1 + n2) / (n1 * n2)) +
(d^2 / (2 * (n1 + n2)))
)
# perform meta-analysis on Lovakov & Agadullina data
overall.la <-
rma.mv(yi = d,
V = d.var,
data = DF.la,
random = ~ 1 | study.id / es.id)
overall.la
tau.la <- sqrt(overall.la$sigma2[1] + overall.la$sigma2[2])
ggplot() +
# demand distribution
stat_function(fun = dnorm,
n = 1000000,
args = list(mean = overall$b,
sd = tau))
ggplot() +
# new demand dist
geom_area(stat = "function",
fun = dnorm,
args = list(mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, 2))
ggplot() +
# new demand dist
geom_area(stat = "function",
fun = dnorm,
args = list(n = 1000000,
mean = overall$b,
sd = tau),
fill = "#F8766D",
alpha = .25,
xlim = c(-2, 2))
?stat_function
ggplot() +
# demand distribution
stat_function(fun = dnorm,
n = 1000000,
args = list(mean = overall$b,
sd = tau),
xlim = c(-2, 2))
ggplot() +
# demand distribution
stat_function(fun = dnorm,
args = list(n = 1000000,
mean = overall$b,
sd = tau),
xlim = c(-2, 2))
ggplot() +
# demand distribution
stat_function(fun = dnorm,
n = 1000000,
args = list(mean = overall$b,
sd = tau),
xlim = c(-2, 2)) +
# nondemand dist
stat_function(fun = dnorm,
n = 1000000,
args = list(mean = overall.la$b,
sd = tau.la),
xlim = c(-2, 2))
